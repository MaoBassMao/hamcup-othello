// --- 定数 ---
const EMPTY = 0; const BLACK = 1; const WHITE = 2; const BOARD_SIZE = 8; const NON_BREAKING_SPACE = '\u00A0';
const POSITIONAL_WEIGHTS = [ [120, -20, 20, 5, 5, 20, -20, 120], [-20, -40, -5, -5, -5, -5, -40, -20], [20, -5, 15, 3, 3, 15, -5, 20], [5, -5, 3, 3, 3, 3, -5, 5], [5, -5, 3, 3, 3, 3, -5, 5], [20, -5, 15, 3, 3, 15, -5, 20], [-20, -40, -5, -5, -5, -5, -40, -20], [120, -20, 20, 5, 5, 20, -20, 120] ];
const MOBILITY_WEIGHT = 5; const AI_MOVE_DELAY = 500; const NUM_IMAGES = 29; const DEFAULT_BLACK_VALUE = 'default_black'; const DEFAULT_WHITE_VALUE = 'default_white';
const IMAGE_NAMES = {'001': 'じゃが','002': 'さくら','003': 'プリン','004': 'かぷちーも','005': 'とっとこハム娘。','006': 'くべし','007': 'リョータ','008': 'ハムまろ','009': 'リーゼント丸','010': 'もみじ','011': 'アクア','012': 'うずら','013': 'すいめい','014': 'ハムりん','015': 'ラッキー','016': 'なないろ','017': 'くり坊','018': 'みたらし','019': 'タンゴ','020': 'ついてる','021': 'バク','022': 'このは','023': 'たいあん','024': 'ハムレット','025': 'クリオネア','026': 'むらむすめ','027': 'あんみつ姫','028': 'べにたん','029': 'もな'};

// --- Supabase クライアント初期化 ---
const SUPABASE_URL = 'https://xreugxrfaegoyhewfyid.supabase.co'; // ★★★ あなたのURLに書き換える ★★★
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhyZXVneHJmYWVnb3loZXdmeWlkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ2OTg4ODUsImV4cCI6MjA2MDI3NDg4NX0.QkORDNLczY1cDn7bTRnO6zAbWGYscttj62z7Fx0xkwI'; // ★★★ あなたのanonキーに書き換える ★★★
let supabaseClient = null;
try { if (window.supabase) { const { createClient } = window.supabase; supabaseClient = createClient(SUPABASE_URL, SUPABASE_ANON_KEY); console.log('Supabase client initialized:', supabaseClient ? 'OK' : 'Failed'); if (!supabaseClient) throw new Error("Initialization failed"); } else { throw new Error('Supabase library not loaded!'); } } catch (error) { console.error('Error initializing Supabase client:', error); /* alert('Supabase接続エラー'); */ }

// --- HTML要素取得 ---
const authContainer = document.getElementById('auth-container'); const emailInput = document.getElementById('email-input'); const passwordInput = document.getElementById('password-input'); const loginButton = document.getElementById('login-button'); const signupButton = document.getElementById('signup-button'); const guestButton = document.getElementById('guest-button'); const authMessage = document.getElementById('auth-message'); const gameSetupElement = document.getElementById('game-setup'); const aiSettingsElement = document.getElementById('ai-settings'); const aiLevelSelect = document.getElementById('aiLevel'); const playerColorRadios = document.querySelectorAll('input[name="playerColor"]'); const imageSettingsElement = document.getElementById('image-settings'); const blackImageSelect = document.getElementById('blackImageSelect'); const whiteImageSelect = document.getElementById('whiteImageSelect'); const startButton = document.getElementById('start-button'); const logoutButton = document.getElementById('logout-button'); const onlineMatchButton = document.getElementById('online-match-button'); const gameContainerElement = document.querySelector('.game-container'); const boardElement = document.getElementById('game-board'); const currentPlayerElement = document.getElementById('current-player'); const gameStatusElement = document.getElementById('game-status'); const scoreElement = document.getElementById('score'); const gameResultElement = document.getElementById('game-result'); const resultMessageElement = document.getElementById('result-message'); const resetButton = document.getElementById('reset-button');

// --- グローバル変数 ---
let board = []; let currentPlayer = BLACK; let gameOver = false; let playerBlackType = 'human'; let playerWhiteType = 'ai_level2'; let lastMoveRow = -1; let lastMoveCol = -1; let playerBlackImage = ''; let playerWhiteImage = ''; let currentUser = null; let currentGameId = null; let realtimeChannel = null;

// --- Helper Function ---
function formatImageNumber(num) { return String(num).padStart(3, '0'); }

/** 画像選択のドロップダウンを生成 (名前表示・「画像」削除) */
function populateImageSelectors() {
    console.log('Populating image selectors...');
    // nullチェックを追加
    if (!blackImageSelect || !whiteImageSelect || !gameModeRadios) {
        console.error("Required elements for populateImageSelectors not found.");
        return;
    }
    try {
        const selectedModeElement = document.querySelector('input[name="gameMode"]:checked');
        if (!selectedModeElement) { return; }
        const selectedMode = selectedModeElement.value;
        const currentBlackVal = blackImageSelect.value; const currentWhiteVal = whiteImageSelect.value;
        blackImageSelect.innerHTML = ''; whiteImageSelect.innerHTML = '';

        const defaultBlackOpt = document.createElement('option'); defaultBlackOpt.value = DEFAULT_BLACK_VALUE; defaultBlackOpt.textContent = 'デフォルト (黒)'; blackImageSelect.appendChild(defaultBlackOpt);
        const defaultWhiteOpt = document.createElement('option'); defaultWhiteOpt.value = DEFAULT_WHITE_VALUE; defaultWhiteOpt.textContent = 'デフォルト (白)'; whiteImageSelect.appendChild(defaultWhiteOpt);

        const generateOption = (index) => { const numStr = formatImageNumber(index); const displayName = IMAGE_NAMES[numStr] || `不明 (${numStr})`; const option = document.createElement('option'); option.value = numStr; option.textContent = `${numStr}: ${displayName}`; return option; };

        if (selectedMode === 'hvh') { for (let i = 1; i <= NUM_IMAGES; i++) { if (i % 2 !== 0) { blackImageSelect.appendChild(generateOption(i)); } if (i % 2 === 0) { whiteImageSelect.appendChild(generateOption(i)); } } }
        else { for (let i = 1; i <= NUM_IMAGES; i++) { blackImageSelect.appendChild(generateOption(i).cloneNode(true)); whiteImageSelect.appendChild(generateOption(i).cloneNode(true)); } }
        blackImageSelect.value = (blackImageSelect.querySelector(`option[value="${currentBlackVal}"]`)) ? currentBlackVal : DEFAULT_BLACK_VALUE;
        whiteImageSelect.value = (whiteImageSelect.querySelector(`option[value="${currentWhiteVal}"]`)) ? currentWhiteVal : DEFAULT_WHITE_VALUE;
        if (blackImageSelect.options.length === 1) blackImageSelect.value = DEFAULT_BLACK_VALUE;
        if (whiteImageSelect.options.length === 1) whiteImageSelect.value = DEFAULT_WHITE_VALUE;

        console.log('Image selectors populated with names.');
    } catch (error) { console.error("Error in populateImageSelectors:", error); }
}

// --- UI 表示切り替え関数 ---
function showAuthScreen() { if(authContainer) authContainer.style.display = 'flex'; if(gameSetupElement) gameSetupElement.style.display = 'none'; if(gameContainerElement) gameContainerElement.style.display = 'none'; if(logoutButton) logoutButton.style.display = 'none'; }
function showSetupScreen() { if(authContainer) authContainer.style.display = 'none'; if(gameSetupElement) gameSetupElement.style.display = 'flex'; if(gameContainerElement) gameContainerElement.style.display = 'none'; if(logoutButton) logoutButton.style.display = 'inline-block'; populateImageSelectors(); }
function showGameScreen() { if(authContainer) authContainer.style.display = 'none'; if(gameSetupElement) gameSetupElement.style.display = 'none'; if(gameContainerElement) gameContainerElement.style.display = 'flex'; }
function setAuthMessage(message, isError = false) { if(authMessage) { authMessage.textContent = message; authMessage.style.color = isError ? 'red' : 'green'; } }

// --- 認証関連の処理 ---
async function handleGuestLogin() { if (!supabaseClient) return setAuthMessage('Supabase接続エラー', true); setAuthMessage('ゲストログイン中...'); try { const { data, error } = await supabaseClient.auth.signInAnonymously(); if (error) throw error; console.log('Guest login successful:', data.user); currentUser = data.user; setAuthMessage(''); showSetupScreen(); } catch (error) { console.error('Guest login error:', error); setAuthMessage(`ゲストログイン失敗: ${error.message || error}`, true); } }
async function handleSignup() { if (!supabaseClient) return setAuthMessage('Supabase接続エラー', true); const email = emailInput.value; const password = passwordInput.value; if (!email || !password) return setAuthMessage('メールアドレスとパスワードを入力してください。', true); setAuthMessage('新規登録中...'); try { const { data, error } = await supabaseClient.auth.signUp({ email, password }); if (error) throw error; console.log('Signup successful, user:', data.user); if (data.user && data.user.identities && data.user.identities.length === 0) { setAuthMessage('確認メールを送信しました。メールを確認してください。', false); } else if (data.user) { setAuthMessage('登録成功！再度ログインしてください。', false); } else { setAuthMessage('登録に成功しましたが、ユーザー情報が取得できませんでした。', true); } } catch (error) { console.error('Signup error:', error); setAuthMessage(`登録失敗: ${error.message || error}`, true); } }
async function handleLogin() { if (!supabaseClient) return setAuthMessage('Supabase接続エラー', true); const email = emailInput.value; const password = passwordInput.value; if (!email || !password) return setAuthMessage('メールアドレスとパスワードを入力してください。', true); setAuthMessage('ログイン中...'); try { const { data, error } = await supabaseClient.auth.signInWithPassword({ email, password }); if (error) throw error; console.log('Login successful:', data.user); currentUser = data.user; setAuthMessage(''); showSetupScreen(); } catch (error) { console.error('Login error:', error); setAuthMessage(`ログイン失敗: ${error.message || error}`, true); } }
async function handleLogout() { if (!supabaseClient) return alert('Supabase接続エラー'); try { const { error } = await supabaseClient.auth.signOut(); if (error) throw error; console.log('Logout successful'); currentUser = null; if(realtimeChannel) { supabaseClient.removeChannel(realtimeChannel); realtimeChannel = null; } currentGameId = null; showAuthScreen(); } catch (error) { console.error('Logout error:', error); alert(`ログアウト失敗: ${error.message || error}`); } }

// --- オンライン対戦関連の関数 ---
async function handleOnlineMatchmaking() { if (!currentUser) { alert("ログインまたはゲストプレイが必要です。"); return; } if (!supabaseClient) { alert("Supabase接続エラー"); return; } console.log("Looking for an online game..."); setStatusMessage("対戦相手を探しています..."); if(onlineMatchButton) onlineMatchButton.disabled = true; try { const { data: waitingGames, error: findError } = await supabaseClient.from('games').select('id').eq('status', 'waiting_for_opponent').is('player_white_id', null).neq('player_black_id', currentUser.id).limit(1); if (findError) throw findError; if (waitingGames && waitingGames.length > 0) { const gameToJoin = waitingGames[0]; console.log("Found waiting game, joining:", gameToJoin.id); const { data: joinedGame, error: joinError } = await supabaseClient.from('games').update({ player_white_id: currentUser.id, status: 'active' }).eq('id', gameToJoin.id).select().single(); if (joinError) throw joinError; if (!joinedGame) throw new Error("Failed to join game."); console.log("Joined game:", joinedGame); enterOnlineGame(joinedGame.id); } else { console.log("No waiting game found, creating new game..."); const initialBoardState = [[EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY],[EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY],[EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY],[EMPTY,EMPTY,EMPTY,WHITE,BLACK,EMPTY,EMPTY,EMPTY],[EMPTY,EMPTY,EMPTY,BLACK,WHITE,EMPTY,EMPTY,EMPTY],[EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY],[EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY],[EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY]]; const { data: newGame, error: createError } = await supabaseClient.from('games').insert({ player_black_id: currentUser.id, board_state: initialBoardState, current_turn: BLACK, status: 'waiting_for_opponent' }).select().single(); if (createError) throw createError; if (!newGame) throw new Error("Failed to create game."); console.log("Created new game:", newGame); setStatusMessage("対戦相手を待っています..."); enterOnlineGame(newGame.id); } } catch (error) { console.error("Error during matchmaking:", error); setStatusMessage(`エラーが発生しました: ${error.message}`); if(onlineMatchButton) onlineMatchButton.disabled = false; } }
function enterOnlineGame(gameId) { console.log(`Entering online game: ${gameId}`); currentGameId = gameId; if (realtimeChannel) { supabaseClient.removeChannel(realtimeChannel); realtimeChannel = null; console.log("Removed previous Realtime channel."); } realtimeChannel = supabaseClient.channel(`game:${currentGameId}`).on('postgres_changes', { event: 'UPDATE', schema: 'public', table: 'games', filter: `id=eq.${currentGameId}` }, (payload) => handleRealtimeUpdate(payload)).subscribe((status, err) => { if (status === 'SUBSCRIBED') { console.log('Realtime channel subscribed successfully!'); fetchAndRenderGameState(); } else if (status === 'CHANNEL_ERROR' || status === 'TIMED_OUT' || status === 'CLOSED') { console.error(`Realtime channel error/closed: ${status}`, err); setStatusMessage("リアルタイム接続エラー"); } }); /* UI切り替えは fetchAndRenderGameState 内で行う */ }
function handleRealtimeUpdate(payload) { console.log('Realtime update received:', payload); if (payload.new && payload.table === 'games') { const updatedGameData = payload.new; board = updatedGameData.board_state; currentPlayer = updatedGameData.current_turn; lastMoveRow = updatedGameData.last_move_row ?? -1; lastMoveCol = updatedGameData.last_move_col ?? -1; if (updatedGameData.status === 'active' && gameStatusElement.textContent.includes("待っています")) { setStatusMessage("対戦相手が見つかりました！"); } else if (updatedGameData.status.includes('won') || updatedGameData.status === 'draw') { gameOver = true; setStatusMessage("ゲーム終了"); } else if (!gameOver) { setStatusMessage(NON_BREAKING_SPACE); } renderBoard(); updateUI(); /* checkAndTriggerAI(); オンラインでは不要 */ } }
async function fetchAndRenderGameState() { if (!currentGameId || !supabaseClient) return; console.log(`Workspaceing initial game state for ${currentGameId}`); try { const { data, error } = await supabaseClient.from('games').select('*').eq('id', currentGameId).single(); if (error) throw error; if (!data) throw new Error("Game data not found."); board = data.board_state; currentPlayer = data.current_turn; lastMoveRow = data.last_move_row ?? -1; lastMoveCol = data.last_move_col ?? -1; if (data.status === 'waiting_for_opponent') { setStatusMessage("対戦相手を待っています..."); } else { setStatusMessage(NON_BREAKING_SPACE); } renderBoard(); updateUI(); showGameScreen(); console.log("Initial game state loaded and rendered."); /* checkAndTriggerAI(); オンラインでは不要 */ } catch (error) { console.error("Error fetching game state:", error); setStatusMessage("ゲームデータの読み込みに失敗しました。"); showSetupScreen(); currentGameId = null; if (realtimeChannel) { supabaseClient.removeChannel(realtimeChannel); realtimeChannel = null; } } }

// --- ゲームロジック等の関数定義 ---
/** 盤面を描画 */
function renderBoard() { if (!boardElement) { console.error("renderBoard: boardElement is null!"); return; } boardElement.innerHTML = ''; const highlighted = boardElement.querySelector('.last-move'); if (highlighted) highlighted.classList.remove('last-move'); if (!board || board.length !== BOARD_SIZE) { console.error("renderBoard: board data is invalid!"); return; } for (let r = 0; r < BOARD_SIZE; r++) { if (!board[r] || board[r].length !== BOARD_SIZE) { console.error(`renderBoard: board row ${r} is invalid!`); continue; } for (let c = 0; c < BOARD_SIZE; c++) { const cell = document.createElement('div'); cell.className = 'cell'; cell.dataset.row = r; cell.dataset.col = c; const discType = board[r][c]; if (discType !== EMPTY) { const source = (discType === BLACK) ? playerBlackImage : playerWhiteImage; if (source === DEFAULT_BLACK_VALUE || source === DEFAULT_WHITE_VALUE) { const discDiv = document.createElement('div');